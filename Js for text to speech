navigator.mediaDevices.getUserMedia({ audio: true })
  .then(stream => {
    const audioChunks = [];
    const recorder = new MediaRecorder(stream);

    recorder.addEventListener("dataavailable", event => {
      audioChunks.push(event.data);
    });

    recorder.addEventListener("stop", async () => {
      const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
      const audioBase64 = await arrayBufferToBase64(audioBlob.arrayBuffer());
      
      // Select language
      const language = "en-US";

      const response = await fetch("https://api.openai.com/v1/engines/davinci/jobs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer <YOUR_API_KEY>`
        },
        body: JSON.stringify({
          "model": "text-davinci-002",
          "prompt": `Transcribe this audio in ${language}:`,
          "audio": audioBase64,
          "language": language
        })
      });

      if (response.ok) {
        const transcription = (await response.json()).choices[0].text;
        console.log(`Transcription: ${transcription}`);
      } else {
        console.error(`Error: ${await response.text()}`);
      }
    });

    recorder.start();
    setTimeout(() => {
      recorder.stop();
    }, 5000);
  })
  .catch(console.error);

function arrayBufferToBase64(arrayBuffer) {
  return new Promise((resolve, reject) => {
    const uint8Array = new Uint8Array(arrayBuffer);
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result.split(",")[1]);
    reader.onerror = reject;
    reader.readAsDataURL(new Blob([uint8Array]));
  });
}
